name: Build Executable

on:
  push:
    branches:
      - main

jobs:
  build-executable:
    runs-on: windows-latest

    steps:
      - name: 📦 Téléchargement du projet
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: 🪄 Mise en place de Python
        uses: actions/setup-python@v2
        with:
          python-version: 3.11.4

      - name: 😀 Installation des librairies pipreqs et pyinstaller 
        run: |
          pip install pyinstaller
          pip install pipreqs

      - name: 😎 Installation des librairies du projet
        run: |
          pipreqs . --force
          pip install -r requirements.txt

      - name: 🛠️ Construction de l'exécutable
        run: pyinstaller --onedir -n StartProject -w --icon "Picture/App/logo.ico" --add-data "data_app:data_app" --add-data "flask_app:flask_app" --add-data "tkinter_app:tkinter_app" --add-data "Picture:Picture" --add-data "pystray_app:pystray_app" --add-data "utilities.py:." --add-data "index.html:." --add-data "README.md:." --add-data "LICENSE.md:." ./main.py
        
      - name: 📂 Zipper le dossier StartProject
        run: zip -r StartProject.zip dist/StartProject/*

      - name: 📤 Transférer des fichiers
        uses: actions/upload-artifact@v2
        with:
          name: executable-startproject
          path: |
            StartProject.zip
            requirements.txt


  send-release:
    needs: build-executable
    runs-on: ubuntu-latest

    steps:
      - name: 📥 Télécharger des fichiers
        uses: actions/download-artifact@v2
        with:
          name: executable-startproject

      - name: 🔄 Nombre de commits du projet
        id: get_commit_count
        run: |
          COMMIT_COUNT=$(git rev-list --count HEAD)
          echo "::set-output name=commit_count::$COMMIT_COUNT"

      - name: 📃 Liste des bibliothèques utilisées
        id: format_libraries
        run: |
          cat requirements.txt | while read line; do
            library=$(echo $line | cut -d'=' -f1)
            version=$(echo $line | cut -d'=' -f2)
            formatted_libs="$formatted_libs - $library - _$version_"$'\n'
          done
          echo "::set-output name=formatted_libs::$formatted_libs"

      - name: 🚀 Création d'une Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.TOKEN_GITHUB }}
        with:
          tag_name: "Alpha-0.${{ steps.get_commit_count.outputs.commit_count }}"
          release_name: "Alpha 0.${{ steps.get_commit_count.outputs.commit_count }}"
          body: |
            # Version Alpha 0.${{ steps.get_commit_count.outputs.commit_count }} de StartProject

            Il s'agit d'une version **alpha** du projet StartProject. Bien que ce soit un travail en cours, il représente une version fonctionnelle du projet.
            Pour plus d'informations et de conseils, veuillez vous référer aux fichiers [README](https://github.com/xen0r-star/StartProject/blob/main/README.md) et [LICENSE](https://github.com/xen0r-star/StartProject/blob/main/LICENSE.md).

            ### Bibliothèques Utilisées :
            ${{ steps.format_libraries.outputs.formatted_libs }}
            
            N'hésitez pas à explorer et à fournir des retours 👍 
          draft: false
          prerelease: false

      - name: 📌 Joindre le fichier zip à la Release
        id: attach_zip
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.TOKEN_GITHUB }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: StartProject.zip
          asset_name: StartProject.zip
          asset_content_type: application/zip

      - name: 🧹 Supprimer les artefacts
        run: |
          rm StartProject.zip
          rm requirements.txt